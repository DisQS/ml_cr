# Module creates crystal field Hamiltonian matrix for point group (PG) Oh and J=4.
# Number of crystal field variables is 2: {x0, x1}.
import numpy as np
def ham_cr_PG_Oh_J_4(x0, x1):
	J = 4
	dim=2*J+1
	ham = np.arange(dim*dim, dtype=np.float)
	ham = ham.reshape(dim,dim)
	ham[0][0] = 0.2860387767736777*x0 + 2.1507845372965946*x0*x1 - 0.2860387767736777*x0*np.abs(x1)
	ham[0][1] = 0.
	ham[0][2] = 0.
	ham[0][3] = 0.
	ham[0][4] = -3.5897581584785954*x0 + 1.285339605745463*x0*x1 + 3.5897581584785954*x0*np.abs(x1)
	ham[0][5] = 0.
	ham[0][6] = 0.
	ham[0][7] = 0.
	ham[0][8] = 0.
	ham[1][0] = 0.
	ham[1][1] = -1.2156648012881304*x0 - 3.226176805944892*x0*x1 + 1.2156648012881304*x0*np.abs(x1)
	ham[1][2] = 0.
	ham[1][3] = 0.
	ham[1][4] = 0.
	ham[1][5] = 0.5675906014982022*x0 + 2.0323003604892547*x0*x1 - 0.5675906014982022*x0*np.abs(x1)
	ham[1][6] = 0.
	ham[1][7] = 0.
	ham[1][8] = 0.
	ham[2][0] = 0.
	ham[2][1] = 0.
	ham[2][2] = 1.5732132722552274*x0 - 1.6899021364473241*x0*x1 - 1.5732132722552274*x0*np.abs(x1)
	ham[2][3] = 0.
	ham[2][4] = 0.
	ham[2][5] = 0.
	ham[2][6] = 3.003407156123616*x0 + 2.3044120042463514*x0*x1 - 3.003407156123616*x0*np.abs(x1)
	ham[2][7] = 0.
	ham[2][8] = 0.
	ham[3][0] = 0.
	ham[3][1] = 0.
	ham[3][2] = 0.
	ham[3][3] = 0.07150969419341943*x0 + 1.3826472025478107*x0*x1 - 0.07150969419341943*x0*np.abs(x1)
	ham[3][4] = 0.
	ham[3][5] = 0.
	ham[3][6] = 0.
	ham[3][7] = 0.5675906014982022*x0 + 2.0323003604892547*x0*x1 - 0.5675906014982022*x0*np.abs(x1)
	ham[3][8] = 0.
	ham[4][0] = -3.5897581584785954*x0 + 1.285339605745463*x0*x1 + 3.5897581584785954*x0*np.abs(x1)
	ham[4][1] = 0.
	ham[4][2] = 0.
	ham[4][3] = 0.
	ham[4][4] = -1.4301938838683885*x0 + 2.7652944050956214*x0*x1 + 1.4301938838683885*x0*np.abs(x1)
	ham[4][5] = 0.
	ham[4][6] = 0.
	ham[4][7] = 0.
	ham[4][8] = -3.5897581584785954*x0 + 1.285339605745463*x0*x1 + 3.5897581584785954*x0*np.abs(x1)
	ham[5][0] = 0.
	ham[5][1] = 0.5675906014982022*x0 + 2.0323003604892547*x0*x1 - 0.5675906014982022*x0*np.abs(x1)
	ham[5][2] = 0.
	ham[5][3] = 0.
	ham[5][4] = 0.
	ham[5][5] = 0.07150969419341943*x0 + 1.3826472025478107*x0*x1 - 0.07150969419341943*x0*np.abs(x1)
	ham[5][6] = 0.
	ham[5][7] = 0.
	ham[5][8] = 0.
	ham[6][0] = 0.
	ham[6][1] = 0.
	ham[6][2] = 3.003407156123616*x0 + 2.3044120042463514*x0*x1 - 3.003407156123616*x0*np.abs(x1)
	ham[6][3] = 0.
	ham[6][4] = 0.
	ham[6][5] = 0.
	ham[6][6] = 1.5732132722552274*x0 - 1.6899021364473241*x0*x1 - 1.5732132722552274*x0*np.abs(x1)
	ham[6][7] = 0.
	ham[6][8] = 0.
	ham[7][0] = 0.
	ham[7][1] = 0.
	ham[7][2] = 0.
	ham[7][3] = 0.5675906014982022*x0 + 2.0323003604892547*x0*x1 - 0.5675906014982022*x0*np.abs(x1)
	ham[7][4] = 0.
	ham[7][5] = 0.
	ham[7][6] = 0.
	ham[7][7] = -1.2156648012881304*x0 - 3.226176805944892*x0*x1 + 1.2156648012881304*x0*np.abs(x1)
	ham[7][8] = 0.
	ham[8][0] = 0.
	ham[8][1] = 0.
	ham[8][2] = 0.
	ham[8][3] = 0.
	ham[8][4] = -3.5897581584785954*x0 + 1.285339605745463*x0*x1 + 3.5897581584785954*x0*np.abs(x1)
	ham[8][5] = 0.
	ham[8][6] = 0.
	ham[8][7] = 0.
	ham[8][8] = 0.2860387767736777*x0 + 2.1507845372965946*x0*x1 - 0.2860387767736777*x0*np.abs(x1)
	return ham
# Module creates crystal field Hamiltonian matrix for point group (PG) C4v and J=4.
# Number of crystal field variables is 5 (and sign of x5): {x0, x1, x2, x3, x4, sign(x5)}.
def ham_cr_PG_C4v_J_4(x0, x1, x2, x3, x4, x5):
	J = 4
	dim=2*J+1
	ham = np.arange(dim*dim, dtype=np.float)
	ham = ham.reshape(dim,dim)
	ham[0][0] = 4.786344211304794*x0*x1 + 2.8160379844863472*x0*x3 + 0.8090398349558905*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[0][1] = 0.
	ham[0][2] = 0.
	ham[0][3] = 0.
	ham[0][4] = 1.991239554909194*x0*x2 + 3.837612894400988*x0*x4
	ham[0][5] = 0.
	ham[0][6] = 0.
	ham[0][7] = 0.
	ham[0][8] = 0.
	ham[1][0] = 0.
	ham[1][1] = 1.1965860528261985*x0*x1 - 4.224056976729521*x0*x3 - 3.438419298562535*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[1][2] = 0.
	ham[1][3] = 0.
	ham[1][4] = 0.
	ham[1][5] = 3.1484261802664855*x0*x2 - 0.6067798762169179*x0*x4
	ham[1][6] = 0.
	ham[1][7] = 0.
	ham[1][8] = 0.
	ham[2][0] = 0.
	ham[2][1] = 0.
	ham[2][2] = -1.3675269175156552*x0*x1 - 2.2126012735249874*x0*x3 + 4.449719092257398*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[2][3] = 0.
	ham[2][4] = 0.
	ham[2][5] = 0.
	ham[2][6] = 3.5699797260986297*x0*x2 - 3.2107773060570404*x0*x4
	ham[2][7] = 0.
	ham[2][8] = 0.
	ham[3][0] = 0.
	ham[3][1] = 0.
	ham[3][2] = 0.
	ham[3][3] = -2.9059946997207677*x0*x1 + 1.8103101328840805*x0*x3 + 0.20225995873897262*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[3][4] = 0.
	ham[3][5] = 0.
	ham[3][6] = 0.
	ham[3][7] = 3.1484261802664855*x0*x2 - 0.6067798762169179*x0*x4
	ham[3][8] = 0.
	ham[4][0] = 1.991239554909194*x0*x2 + 3.837612894400988*x0*x4
	ham[4][1] = 0.
	ham[4][2] = 0.
	ham[4][3] = 0.
	ham[4][4] = -3.4188172937891386*x0*x1 + 3.620620265768161*x0*x3 - 4.0451991747794525*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[4][5] = 0.
	ham[4][6] = 0.
	ham[4][7] = 0.
	ham[4][8] = 1.991239554909194*x0*x2 + 3.837612894400988*x0*x4
	ham[5][0] = 0.
	ham[5][1] = 3.1484261802664855*x0*x2 - 0.6067798762169179*x0*x4
	ham[5][2] = 0.
	ham[5][3] = 0.
	ham[5][4] = 0.
	ham[5][5] = -2.9059946997207677*x0*x1 + 1.8103101328840805*x0*x3 + 0.20225995873897262*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[5][6] = 0.
	ham[5][7] = 0.
	ham[5][8] = 0.
	ham[6][0] = 0.
	ham[6][1] = 0.
	ham[6][2] = 3.5699797260986297*x0*x2 - 3.2107773060570404*x0*x4
	ham[6][3] = 0.
	ham[6][4] = 0.
	ham[6][5] = 0.
	ham[6][6] = -1.3675269175156552*x0*x1 - 2.2126012735249874*x0*x3 + 4.449719092257398*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[6][7] = 0.
	ham[6][8] = 0.
	ham[7][0] = 0.
	ham[7][1] = 0.
	ham[7][2] = 0.
	ham[7][3] = 3.1484261802664855*x0*x2 - 0.6067798762169179*x0*x4
	ham[7][4] = 0.
	ham[7][5] = 0.
	ham[7][6] = 0.
	ham[7][7] = 1.1965860528261985*x0*x1 - 4.224056976729521*x0*x3 - 3.438419298562535*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	ham[7][8] = 0.
	ham[8][0] = 0.
	ham[8][1] = 0.
	ham[8][2] = 0.
	ham[8][3] = 0.
	ham[8][4] = 1.991239554909194*x0*x2 + 3.837612894400988*x0*x4
	ham[8][5] = 0.
	ham[8][6] = 0.
	ham[8][7] = 0.
	ham[8][8] = 4.786344211304794*x0*x1 + 2.8160379844863472*x0*x3 + 0.8090398349558905*x0*np.abs(1. - 1.*np.abs(x1) - 1.*np.abs(x2) - 1.*np.abs(x3) - 1.*np.abs(x4))*np.sign(x5)
	return ham
